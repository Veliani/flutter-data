name: Build Flutter from ZIP (auto-create Android & patch Kotlin/Gradle)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find project ZIP
        id: findzip
        shell: bash
        run: |
          set -e
          if [ -f "app.zip" ]; then
            echo "zipfile=app.zip" >> $GITHUB_OUTPUT
          else
            first_zip=$(ls -1 *.zip | head -n 1 || true)
            if [ -z "$first_zip" ]; then
              echo "No ZIP found in repo root. Please upload your Flutter project ZIP (e.g., app.zip)." >&2
              exit 1
            fi
            echo "zipfile=$first_zip" >> $GITHUB_OUTPUT
          fi
          echo "Using ZIP: ${{ steps.findzip.outputs.zipfile }}"

      - name: Unzip project
        id: unzip
        shell: bash
        run: |
          set -e
          unzip -q "${{ steps.findzip.outputs.zipfile }}" -d extracted
          topdir=$(ls -1 extracted | head -n 1 || true)
          if [ -f "extracted/pubspec.yaml" ]; then
            echo "PUBROOT=extracted" >> $GITHUB_ENV
          elif [ -n "$topdir" ] && [ -f "extracted/$topdir/pubspec.yaml" ]; then
            echo "PUBROOT=extracted/$topdir" >> $GITHUB_ENV
          else
            found=$(find extracted -maxdepth 3 -name pubspec.yaml | head -n 1 || true)
            if [ -z "$found" ]; then
              echo "pubspec.yaml not found inside zip. Ensure your zip contains a Flutter project." >&2
              exit 1
            fi
            echo "PUBROOT=$(dirname "$found")" >> $GITHUB_ENV
          fi
          echo "Resolved PUBROOT=$PUBROOT"

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"
          channel: "stable"
          cache: true

      - name: Ensure platforms exist (auto flutter create)
        working-directory: ${{ env.PUBROOT }}
        shell: bash
        run: |
          set -e
          if [ ! -d "android" ] || [ ! -f "android/build.gradle" ]; then
            echo "Android folder not found. Running 'flutter create .'..."
            flutter create .
          fi

      # ---- Kotlin / Gradle compatibility patch ----
      - name: Upgrade Android Gradle & Kotlin (compat with Flutter 3.24.x)
        working-directory: ${{ env.PUBROOT }}
        shell: bash
        run: |
          set -e
          if [ -f "android/build.gradle" ]; then
            echo "Patching Kotlin & AGP in android/build.gradle (if present)..."
            # kotlin_version in ext
            if grep -q 'ext.kotlin_version' android/build.gradle; then
              sed -i 's/ext.kotlin_version *= *".*"/ext.kotlin_version = "1.9.24"/' android/build.gradle || true
            fi
            # com.android.tools.build:gradle classpath
            if grep -q 'com.android.tools.build:gradle' android/build.gradle; then
              sed -i 's/com\.android\.tools\.build:gradle:[^"]*/com.android.tools.build:gradle:8.5.2/' android/build.gradle || true
            fi
          fi

          # gradle wrapper -> 8.5
          if [ -f "android/gradle/wrapper/gradle-wrapper.properties" ]; then
            sed -i 's#distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-8.5-bin.zip#' android/gradle/wrapper/gradle-wrapper.properties
          fi

          # Optional: ensure org.gradle.jvmargs not too low (avoid OOM)
          if [ -f "android/gradle.properties" ]; then
            if ! grep -q 'org.gradle.jvmargs' android/gradle.properties; then
              echo 'org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8' >> android/gradle.properties
            fi
          fi

      - name: Flutter pub get
        working-directory: ${{ env.PUBROOT }}
        run: flutter pub get

      - name: Build APK (release)
        working-directory: ${{ env.PUBROOT }}
        run: flutter build apk --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PUBROOT }}/build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: error
